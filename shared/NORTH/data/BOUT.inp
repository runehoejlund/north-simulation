#
# NORTH input file
#
# x - The radial coordinate (rho)
# y - The height of the cylinder (z)
# z - The azimuthal coordinate (theta)

timestep 	= 50 		# Output timestep
nout 		= 1000		# Number of output steps

myg 		= 0		    # No need for Y communications
mxg 		= 2 		# x-guard cells

monitor_timestep = true

[mesh]
nx 			= 48+2*mxg	# internal grid points plus guard cells along x-axis
ny 			= 1      	# y is along magnetic field, set to 1
nz 			= 128 		# internal grid points along z-axis

# Number of processors. If running on e.g. xeon40,
# we must have NXPE * NYPE = 40
# Also, we must satisfy the constraints:
# (nx - 2*mxg)/NXPE = integer, and
# ny/NYPE = integer
NXPE        = 24         #Number of processors in x-direction
NYPE        = 1         # Number of processors in y-direction

Lx 			= north:a/north:rho_s 		# simulation length along x-axis

dx 			= Lx/(nx-1-2*mxg)           # grid spacing along x-axis
dy 			= 1.0                       # grid spacing along y-axis

# Set the z coordinate range in multiples of 2 pi
ZMIN = 0.0
ZMAX = 1.0 # So we will get: dz = 2*pi(ZMAX - ZMIN)/(nz-1)

# The metrics
xl          = (x * Lx)                  # x (r)-coordinate in range (0,Lx)
xl_non_zero = max(xl,Lx/(2*nx))         # make sure xl is >0 when defining J and g22, g33
sqrt_g_22 = (north:R/north:rho_s + xl_non_zero*cos(z))
sqrt_g_33 = xl_non_zero
g_22         = (sqrt_g_22)^2            # covariant metric tensor component g_{22} (g_{zeta zeta})
g_33         = (sqrt_g_33)^2            # covariant metric tensor component g_{33} (g_{theta theta})
g22         = 1/g_22
g33         = 1/g_33                    # contravariant metric tensor component g^{33} (g^{theta theta})
J           = sqrt_g_33*sqrt_g_33       # Jacobian (determinant)
Bxy         = 1                         # Magnetic field in Clebsch form B = \grad z \cross \grad x: https://bout-dev.readthedocs.io/en/latest/user_docs/coordinates.html#id1

# Puts the boundaries half a step outside the last gridpoints
symmetricGlobalY=true
symmetricGlobalX=true

# Position of the separatrix
# Points 0 <= x < ixseps1 are inside separatrix, ixseps1 <= x < ngx outside
# --------Non-periodic----------
ixseps1 = -1
ixseps2 = -1
# ------------------------------

[mesh:ddx] 	# methods used for x derivative terms
first  		= C4  		# d/dx (f)
second 		= C4  		# d^2/dx^2 (f)
upwind 		= W3  		# v_x d/dx (f)
flux   		= U1  		# d/dx (v_x f)

[mesh:ddy] 	# methods used for y derivative terms
first  		= C4 		# d/dx (f)
second 		= C4 		# d^2/dx^2 (f)
upwind 		= W3 		# v_x d/dx (f)
flux   		= U1 		# d/dx (v_x f)

[mesh:ddz] 	# methods used for z derivative terms
first  		= C4  		# d/dx (f)
second 		= C4  		# d^2/dx^2 (f)
upwind 		= W3  		# v_x d/dx (f)
flux   		= U1  		# d/dx (v_x f)

[laplace]
# flags = 0   # Flags for Laplacian inversion
include_yguards = true
inner_boundary_flags = 3
outer_boundary_flags = 0

[solver]
type 		= pvode

[north]
R 		= 0.250     # (m), 	major radius 
a 		= 0.125 	# (m), 	minor radius
n0 		= 1e16  	# (m^-3), plasma density
Te0 	= 10.0 		# (eV), 	electron temperature
B0 		= 0.077 	# (T), 	magnetic field on axis
R_res   = 0.219     # (m)     ECR radial position

E_ion   = 24.59/Te0 # absolute value of the Bohm normalized ionization energy
n_n_SI  = 1.2e19
n_n     = n_n_SI/n0    # Bohm normalized neutral number density


e 		= 1.60e-19 	# (C)
me      = 9.1094e-31 # Electron mass (kg)
mp		= 1.67e-27 	# Proton mass (kg)
atomic_mass_number = 4  # Atomic mass number (for He)
mi      = atomic_mass_number*mp      # Ion nucleus mass (kg)

oci 		= e*B0/(mi) 		            # ion gyrofrequency (s^-1)
c_s         = sqrt(Te0*e/(mi))             # Cold-ion sound speed (m/s)
rho_s 		= c_s/oci   	    # cold-ion hybrid thermal gyro-radius (m)
rho_Le_SI    = sqrt(me * (Te0*e)/(e^2 * B0^2))   # Larmor radius (m)
rho_Le       = rho_Le_SI/rho_s              # Normalised Larmor radius

kappa 		    = rho_s^2/(R*a) 	    # Effective gravity.

eps0            = 8.854187815e-12   # Vacuum Permitivity (kg^-1 * m^-3 * s^2 * C^2)
lambda_D        = sqrt((eps0 * Te0 * e) / (n0 * e^2)) # Debye Length (m)

Dvort 		    = 5e-3	      # Vorticity diffusion
Dn 		    	= 5e-3 	   	# Density diffusion (deprecated)

diff_scale_ei   = 1               # We unfortunately need to increase scale of diffusion to avoid numerical instability.
diff_scale_ea   = 500
ln_lambda       = log(12*pi*n0*lambda_D^3)
k_ei_SI         = 2^(1/2) * e^4 * ln_lambda / (12*pi^(3/2) * eps0^2 * me^(1/2) * (Te0 * e)^(3/2))   # ion-electrons collision rate coefficient (m^3 s^-1)
k_ei            = diff_scale_ei * k_ei_SI * n0/oci
sigma_ea        = 6e-21 # Neutral electron cross section.
nu_ea_SI        = (8 * sqrt(2) / (3 * sqrt(pi))) * n_n_SI * sqrt(Te0*e/me) * sigma_ea    # electron-neutrals collision frequency (s^-1)
nu_ea           = diff_scale_ea * nu_ea_SI/oci

DT              = 5e-3        # Temperature diffusion

tau_source	    = 3.66e2        # Source characteristic time
tau_wall_scale  = 10
tau_wall_n      = tau_wall_scale*(pi*north:R/north:c_s)*north:oci          # Density wall shadow characteristic time
tau_wall_Te     = tau_wall_scale*(pi*north:R/north:c_s)*north:oci          # Temperature wall shadow characteristic time
tau_wall_vort   = tau_wall_scale*(pi*north:R/north:c_s)*north:oci          # Vorticity wall shadow characteristic time

n_bck  = 0.01
T_bck  = 1.133986420/north:Te0

#tau_wall_n      = 14.1          # Density wall shadow characteristic time
#tau_wall_Te     = 7.1           # Temperature wall shadow characteristic time

recombination = true
ionization = true

bracket 	= 2 		# 0 = std, 1 = simple, 2 = arakawa

[All]
scale 		= 1.
bndry_all 	= neumann_o2

# sigma_z 	= (0.05/2)/north:R
# sigma_x 	= 0.1*sigma_z

# sigma_z = 0.7540
# sigma_x = 0.01333

sigma_z = 0.03/north:a
sigma_x = 0.005/north:a

# =============================================================================
[n]
scale       	= 1.0
function = north:n_bck
#function 	= 1. + 0.2*mixmode(2*pi*x) * mixmode(z)
# function = 1 + 0.5*sin(6*2*pi*x)*sin(12*z)
# function    = exp(-(x-(north:a + 7.1e-3)/north:R)^2/(all:sigma_z^2))*exp(-(z/(2*pi)-0.5)^2/(2*all:sigma_z^2))
#function    = 1/(sqrt(2*pi)*all:sigma_z)*exp(-x^2/(2*all:sigma_z)^2)

#scale       = 1
#function    = 1/(2*pi*all:sigma_x*all:sigma_z)*exp(-(north:R/north:a + x*cos(z)-north:R_res/north:a)^2/(2*all:sigma_x^2))*exp(-(x*sin(z))^2/(2*all:sigma_z^2))



# Boundaries
bndry_xin   = none              # Manual boundary found in code
#bndry_xout  = neumann_o2(0.0)   # Set to neumann
bndry_xout  = dirichlet(north:n_bck)
# =============================================================================

# =============================================================================
[T]
scale       = 1.0
function 	= north:T_bck

#scale       = 1
#function    = 1/(2*pi*all:sigma_x*all:sigma_z)*exp(-(north:R/north:a + x*cos(z)-north:R_res/north:a)^2/(2*all:sigma_x^2))*exp(-(x*sin(z))^2/(2*all:sigma_z^2))

#scale       	= 0.5
#function    = 1/(sqrt(2*pi)*all:sigma_z)*exp(-x^2/(2*all:sigma_z)^2)


# Boundaries
bndry_xin   = none              # Manual boundary found in code
#bndry_xout  = neumann_o2(0.0)   # Set to neumann
bndry_xout  = dirichlet(north:T_bck)   # Set to neumann
# =============================================================================

# =============================================================================
[vort]
scale       = 1.0
function 	= 0.0

# Boundaries
bndry_xin   = none              # Manual boundary found in code
bndry_xout  = neumann_o2(0.0)   # Set to neumann
# =============================================================================
[B]
scale       = 1.0
function    = (north:R/north:a)/(north:R/north:a + x*cos(z))

# =============================================================================

[source_T]
#scale       = 4
# function 	= 1/(2*pi*all:sigma_x*all:sigma_z)*exp(-(x-(north:a + 7.1e-3)/north:R)^2/(2*all:sigma_x^2))*exp(-(z/(2*pi)-0.5)^2/(2*all:sigma_z^2))
# function 	= 1/(2*pi*all:sigma_x*all:sigma_z)*exp(-(x-(north:a + 7.1e-3)/north:R)^2/(2*all:sigma_x^2))*exp(-(z-pi)^2/(2*all:sigma_z^2))

scale       = 3.024
function    = 1/(2*pi*all:sigma_x*all:sigma_z)*exp(-(north:R/north:a + x*cos(z)-north:R_res/north:a)^2/(2*all:sigma_x^2))*exp(-(x*sin(z))^2/(2*all:sigma_z^2))

[Wall_shadow]
scale         = 1
# function    = exp((x-0.97)/0.03)/2.71828**2
# function    = -1 + exp((x-0.5)^20/(1e-6) + (z-0.5/(2*pi))^20/(1e-6))
# function    = -1 + exp((x-0.5)^20/(1e-6))*exp((z/(2*pi)-0.5)^20/(1e-6))

# function    = 0.5 + 0.5*tanh((x-(north:a/north:a - north:rho_s/north:a))/(0.025))

width = north:rho_s

function    = exp((x-1)/(width/north:a))

[bracket_prefactor]
scale = 1
function = 1/mesh:xl+(north:rho_s/north:R)*cos(Z)

[cos_z_over_x]
scale = 1
function = 1.0*cos(z)/mesh:xl

[sin_z_field]
scale = 1
function = 1.0*sin(z)


[fast_output]
type = monitor
frequency_multiplier = 100
flush = false

# Probes in cartesian coordinates
xprobe0 = 0.05
xprobe1 = 0.14
xprobe2 = 0.23
xprobe3 = 0.32
xprobe4 = 0.41
xprobe5 = 0.50
xprobe6 = 0.59
xprobe7 = 0.68
xprobe8 = 0.77
xprobe9 = 0.86
xprobe10 = 0.95


#xprobe0 = 0.05
#xprobe1 = 0.2
#xprobe2 = 0.4
#xprobe3 = 0.6
#xprobe4 = 0.8
#xprobe5 = 0.95
